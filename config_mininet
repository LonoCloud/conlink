#!/usr/bin/env -S python3 -u

# Copyright (c) 2021, Viasat, Inc
# Licensed under MPL 2.0

"""
Load and start a declarative mininet configuration.
"""

import argparse, signal, subprocess, sys, time

from mininet.log import setLogLevel, info, debug
from mininet.util import dumpNetConnections
from mininet.cli import CLI

from config_mininet import ConfigMininet, loadConfig

def cleanup(cfg, net):
    print("Cleaning up")
    signal.signal(signal.SIGINT | signal.SIGTERM, signal.SIG_DFL)
    net.stop()
    sys.exit(0)

def run(args, cfg):
    "Load and start a file configuration"
    setLogLevel( args.verbose )

    net = ConfigMininet( cfg=cfg )
    signal.signal(signal.SIGINT | signal.SIGTERM, lambda s, f: cleanup(cfg, net))
    try:
        net.start()
        debug( '*** Net Nodes:\n' )
        for node in net.values():
            info( '%s\n' % repr( node ) )
        debug( '*** Net Connections:\n' )
        dumpNetConnections(net)
        if sys.__stdin__.isatty():
            CLI( net )
        else:
            while True: time.sleep(3600)
    except BaseException as e:
        traceback.print_exc()
    cleanup(cfg, net)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Run mininet using a configuration file')
    parser.add_argument('--verbose', '-v',
            nargs='?', default='info', const='debug',
            help='set verbosity (default: info)')
    parser.add_argument('config',
            help='path to configuration file')

    args = parser.parse_args()
    topConfig = loadConfig(args.config)
    config = topConfig.get('mininet-cfg', topConfig)
    run(args, config)

