# A docker-compose file with an embedded network configuration
# and two docker containers that are connected via a switch.
# Each container has an interface supporting MTU of 9000 bytes and has
# a VLAN tagged interface eth0.100.

version: "2.4"

services:
  network:
    build: {context: ../}
    image: conlink
    pid: host
    network_mode: none
    cap_add: [SYS_ADMIN, NET_ADMIN, SYS_NICE, NET_BROADCAST, IPC_LOCK]
    security_opt: [ 'apparmor:unconfined' ] # needed on Ubuntu 18.04
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker:/var/lib/docker
      - ./:/test
    command: /sbin/conlink --compose-file /test/test8-compose.yaml

  node1:
    image: alpine
    cap_add: [NET_ADMIN]
    network_mode: none
    command: sleep 864000

  node2:
    image: alpine
    cap_add: [NET_ADMIN]
    network_mode: none
    command: sleep 864000

x-network:
  # "Physical" network interface definitions.
  # This defines container to container links.
  links:
    - left:  {container: node1_1,   intf:       eth0,  ip: 10.0.1.1/16}
      right: {container: network_1, intf: node1-eth0}
    - left:  {container: node2_1,   intf:       eth0,  ip: 10.0.1.2/16}
      right: {container: network_1, intf: node2-eth0}

  # Commands to run in containers after they are connected
  commands:
    - container: node1_1
      command:
        - ip route add default via 10.0.0.1
        - ip link set dev eth0 mtu 9000
        - ip link add link eth0 name eth0.100 type vlan id 100
        - ip addr add 10.100.0.1/24 dev eth0.100
        - ip link set eth0.100 up
    - container: node2_1
      command:
        - ip route add default via 10.0.0.1
        - ip link set dev eth0 mtu 9000
        - ip link add link eth0 name eth0.100 type vlan id 100
        - ip addr add 10.100.0.2/24 dev eth0.100
        - ip link set eth0.100 up
    - container: network_1
      command:
        - ip link set dev node1-eth0 mtu 9000
        - ip link set dev node2-eth0 mtu 9000

  # Network container mininet configuration
  # This configuration is used by config_mininet.py inside the network
  # container to define complex network elements (routers, switches,
  # etc).
  mininet-cfg:
    switches:
      - name: s1   # the switch between node1, node2, and internet
    interfaces:
      - name: node1-eth0
        node: s1
      - name: node2-eth0
        node: s1
